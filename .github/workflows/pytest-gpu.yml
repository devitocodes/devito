# Adapted from https://github.com/weeyin83/vm-actions
name: CI-gpu

env:
  OUTPUT_PATH: ${{ github.workspace }}

on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  # Deploy VM in Azure
  deploy-vm:
    runs-on: ubuntu-latest

    steps:
    # checkout code from repo
    - name: checkout repo
      uses: actions/checkout@v1

    - name: extract branch name
      shell: bash
      run: |
        if [ "${{ github.head_ref }}" == "" ]; then
          branch="master"
        else
          branch="${{ github.head_ref }}"
        fi
        echo ::set-output name=branch::$branch
      id: extract_branch

    - name: find deploy script
      run: |
        ls '${{ env.OUTPUT_PATH }}/.github/azure'

    - name: deploy VM
      env:
        RESOURCE_GROUP: ${{ secrets.CI_GPU_RESOURCE_GROUP }}
        RESOURCE_GROUP_REGION: uksouth
        VM_SIZE: Standard_NC6_Promo
        SERVER_NAME: gpu_ci_vm_${{ steps.extract_branch.outputs.branch }}
        IMAGE: gpu_ci_vm-image-1220
      run: >
        pwsh -command "& '${{ env.OUTPUT_PATH }}\.github\azure\deployVM.ps1'"
        -servicePrincipal ${{ secrets.SERVICE_PRINCIPAL_APPID }}
        -servicePrincipalSecret ${{ secrets.SERVICE_PRINCIPAL_SECRET }}
        -servicePrincipalTenantId ${{ secrets.SERVICE_PRINCIPAL_TENANTID }}
        -azureSubscriptionName ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        -resourceGroupName $RESOURCE_GROUP
        -resourceGroupNameRegion $RESOURCE_GROUP_REGION
        -size $VM_SIZE
        -serverName $SERVER_NAME
        -vmImage $IMAGE
        -adminLogin ${{ secrets.CI_GPU_VM_ADMIN_LOGIN }}
        -adminPassword ${{ secrets.CI_GPU_VM_ADMIN_PASSWORD }}

    - name: set host
      run: echo ::set-output name=action_host::$(az vm show -d -g ${{ secrets.CI_GPU_RESOURCE_GROUP }} -n gpu_ci_vm_${{ steps.extract_branch.outputs.branch }} --query publicIps -o tsv)
      id: host

    - name: execute tests on VM
      uses: fifsky/ssh-action@master
      with:
        command: |
          #! /bin/bash
          err=0
          trap 'err=1' ERR
          source ~/anaconda3/etc/profile.d/conda.sh
          conda activate devito
          cd ~/devito
          # Ensure no merge conflicts arise
          git checkout master
          if [ "${{ steps.extract_branch.outputs.branch }}" == "master" ]; then
              git pull
          else
              git rev-parse --verify --quiet ${{ steps.extract_branch.outputs.branch }}
              if [ $? -eq 0 ]; then git branch -D ${{ steps.extract_branch.outputs.branch }}; fi
              git fetch
              git checkout ${{ steps.extract_branch.outputs.branch }}
          fi
          # OpenMP offloading
          pgaccelinfo
          DEVITO_ARCH=clang DEVITO_PLATFORM=nvidiaX DEVITO_LANGUAGE=openmp py.test tests/test_gpu_openmp.py
          DEVITO_ARCH=clang DEVITO_PLATFORM=nvidiaX DEVITO_LANGUAGE=openmp py.test examples/seismic/elastic/elastic_example.py
          DEVITO_ARCH=clang DEVITO_PLATFORM=nvidiaX DEVITO_LANGUAGE=openmp py.test examples/seismic/viscoelastic/viscoelastic_example.py
          # OpenACC
          DEVITO_ARCH=pgcc DEVITO_PLATFORM=nvidiaX DEVITO_LANGUAGE=openacc py.test tests/test_gpu_openacc.py
          DEVITO_ARCH=pgcc DEVITO_PLATFORM=nvidiaX DEVITO_LANGUAGE=openacc py.test examples/seismic/elastic/elastic_example.py
          test $err = 0
        host: ${{ steps.host.outputs.action_host }}
        user: ${{ secrets.CI_GPU_VM_ADMIN_LOGIN }}
        pass: ${{ secrets.CI_GPU_VM_ADMIN_PASSWORD }}
