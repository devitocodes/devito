# syntax=docker/dockerfile:1
##############################################################
# This Dockerfile builds a base image to run Devito on generic CPU
# architectures using GCC compilers and OpenMPI.
##############################################################

ARG base=ubuntu:22.04
ARG gcc=""
ARG OMPI_BRANCH="v5.0.x"

FROM ${base} AS base

SHELL ["/bin/bash", "-c"]

ARG gcc
ARG OMPI_BRANCH

COPY requirements-mpi.txt /tmp/requirements-mpi.txt

# Install prerequisites
RUN if command -v apt-get >/dev/null; then \
        export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y \
            software-properties-common dh-autoreconf python3-venv python3-dev python3-pip \
            wget flex libnuma-dev hwloc curl cmake git \
            autoconf libtool build-essential procps \
            libgmp-dev libmpc-dev libmpfr-dev libisl-dev binutils texinfo \
            libncurses5-dev libncursesw5-dev libdrm-dev libsystemd-dev \
            python3-dbg gdb numactl tmux vim libgl1-mesa-glx libfftw3-dev; \
    else \
        dnf update -y && \
        dnf install -y \
            python3 python3-devel python3-pip \
            wget flex numactl-devel hwloc hwloc-devel curl cmake git \
            autoconf libtool make which procps-ng gcc gcc-c++ gcc-gfortran \
            gmp-devel libmpc-devel mpfr-devel isl-devel binutils texinfo \
            ncurses-devel libdrm-devel systemd-devel gdb numactl tmux vim mesa-libGL fftw-devel && \
        (dnf install -y python3-debug || true); \
    fi

# Optional GCC from source
RUN if [ -n "$gcc" ]; then \
        cd /tmp && mkdir gcc && \
        git clone git://gcc.gnu.org/git/gcc.git gcc && \
        cd gcc && git checkout releases/gcc-${gcc} && \
        mkdir build && cd build && \
        ../configure --prefix=/opt/gcc-${gcc} --enable-languages=c,c++,fortran --disable-multilib \
                    --enable-shared --enable-lto --enable-libstdcxx-time=yes --enable-libgomp && \
        make -j $(nproc) && make install-strip && \
        if command -v update-alternatives >/dev/null; then \
            update-alternatives --install /usr/bin/gcc gcc /opt/gcc-${gcc}/bin/gcc 60 && \
            update-alternatives --install /usr/bin/g++ g++ /opt/gcc-${gcc}/bin/g++ 60 && \
            update-alternatives --install /usr/bin/gfortran gfortran /opt/gcc-${gcc}/bin/gfortran 60; \
        else \
            alternatives --install /usr/bin/gcc gcc /opt/gcc-${gcc}/bin/gcc 60 && \
            alternatives --install /usr/bin/g++ g++ /opt/gcc-${gcc}/bin/g++ 60 && \
            alternatives --install /usr/bin/gfortran gfortran /opt/gcc-${gcc}/bin/gfortran 60; \
        fi && \
        rm -rf /tmp/gcc; \
    fi

# Install OpenMPI
RUN cd /tmp && mkdir openmpi && \
    git clone --depth 1 --recursive --branch ${OMPI_BRANCH} https://github.com/open-mpi/ompi.git openmpi && \
    cd openmpi && ./autogen.pl && \
    mkdir build && cd build && \
    ../configure --prefix=/opt/openmpi/ \
                 --disable-mpi-fortran \
                 --enable-mca-no-build=btl-uct --enable-mpi1-compatibility && \
    make -j ${nproc} && \
    make install && \
    rm -rf /tmp/openmpi

# Python virtual environment with mpi4py
RUN python3 -m venv /venv && \
    /venv/bin/pip install --no-cache-dir --upgrade pip wheel setuptools && \
    MPICC=/opt/openmpi/bin/mpicc /venv/bin/pip install --no-cache-dir -r /tmp/requirements-mpi.txt

# Set OpenMPI path
ENV PATH=${PATH}:/opt/openmpi/bin
ENV LD_LIBRARY_PATH=/opt/openmpi/lib

# Cleanup package caches
RUN if command -v apt-get >/dev/null; then \
        apt-get clean && apt-get autoclean && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*; \
    else \
        dnf clean all && rm -rf /var/cache/dnf; \
    fi

EXPOSE 8888
CMD ["/bin/bash"]

##############################################################
# GCC standard image
##############################################################
FROM base AS gcc

# Env vars defaults
ENV DEVITO_ARCH="gcc"
ENV DEVITO_LANGUAGE="openmp"
