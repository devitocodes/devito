##############################################################
# This Dockerfile contains Devito codes + Intel HPC toolkit.
#
# BUILD:
#   docker build --network=host --file docker/Dockerfile.intel --tag devito/intel:1.0 .
#
# RUN:
#   docker run --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 devito
#   docker run --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 --device=/dev/infiniband/uverbs0 --device=/dev/infiniband/rdma_cm  devito
##############################################################
# Inherited from: https://github.com/intel/oneapi-containers/blob/master/images/docker/hpckit/Dockerfile.ubuntu-18.04
# Copyright (c) 2019-2020 Intel Corporation.
# SPDX-License-Identifier: BSD-3-Clause

FROM ubuntu:18.04 as build

RUN mkdir -p /opt/build && mkdir -p /opt/dist

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates curl

# install cmake
RUN cd /opt/build && \
    curl -LO https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2-linux-x86_64.sh && \
    mkdir -p /opt/dist//usr/local && \
    /bin/bash cmake-3.20.2-linux-x86_64.sh --prefix=/opt/dist//usr/local --skip-license

FROM ubuntu:18.04

COPY --from=build /opt/dist /

ARG DEBIAN_FRONTEND=noninteractive
ARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1

# install OS tools
RUN apt-get update -y && \
apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 \
build-essential \
pkg-config \
ca-certificates \
gnupg \
libarchive13 \
wget

# COPY third-party-programs.txt /

# add apt repo public key
ARG url=https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN wget $url
RUN file=$(basename "$url") && \
    apt-key add "$file" && \
    rm "$file"

# configure the repository
ARG repo=https://apt.repos.intel.com/oneapi
RUN echo "deb $repo all main" > /etc/apt/sources.list.d/oneAPI.list

# disable cert check
ARG disable_cert_check=
RUN if [ "$disable_cert_check" ] ; then echo "Acquire::https::Verify-Peer \"false\";\nAcquire::https::Verify-Host \"false\";" > /etc/apt/apt.conf.d/99-disable-cert-check ; fi

# install Intel(R) oneAPI Base Toolkit
RUN apt-get update -y && \
apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 \
intel-basekit-getting-started \
intel-oneapi-advisor \
intel-oneapi-ccl-devel \
intel-oneapi-common-licensing \
intel-oneapi-common-vars \
intel-oneapi-compiler-dpcpp-cpp \
intel-oneapi-dal-devel \
intel-oneapi-dev-utilities \
intel-oneapi-dnnl-devel \
intel-oneapi-dpcpp-debugger \
intel-oneapi-ipp-devel \
intel-oneapi-ippcp-devel \
intel-oneapi-libdpstd-devel \
intel-oneapi-mkl-devel \
intel-oneapi-onevpl-devel \
intel-oneapi-python \
intel-oneapi-tbb-devel \
intel-oneapi-vtune \
--

# install Intel GPU drivers
RUN echo 'deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic main' \
> /etc/apt/sources.list.d/intel-graphics.list

ARG url=https://repositories.intel.com/graphics/intel-graphics.key
RUN wget $url && file=$(basename "$url") && \
    file=$(basename "$url") && \
    apt-key add "$file" && \
    rm "$file"

RUN apt-get update -y && \
apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 \
intel-opencl \
intel-level-zero-gpu \
level-zero \
level-zero-devel

# install Intel(R) oneAPI HPC Toolkit
RUN apt-get update -y && \
apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 \
intel-hpckit-getting-started \
intel-oneapi-clck \
intel-oneapi-common-licensing \
intel-oneapi-common-vars \
intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic \
intel-oneapi-compiler-fortran \
intel-oneapi-dev-utilities \
intel-oneapi-inspector \
intel-oneapi-itac \
intel-oneapi-mpi-devel \
--

# setvars.sh environment variables
RUN env > default_env_vars; \
. /opt/intel/oneapi/setvars.sh; \
env > env_vars; \
diff default_env_vars env_vars \
| grep ">" | sed  s/..// \
| sort \
| sed 's/^/export /' | sed "s/=/='/" | sed "s/$/'/" \
>> /root/.oneapi_env_vars; \
# clean up
rm *env_vars; \
rm -rf /var/lib/apt/lists/*

# ARG INTEL_HOME=/opt/intel/oneapi/
# ENV PATH $INTEL_HOME/mpi/latest/bin:$INTEL_HOME/mpi/latest/include:$INTEL_HOME/compilers/latest/linux/bin/intel64:$INTEL_HOME/mpi/latest/libfabric/bin:${PATH}
# ENV LD_LIBRARY_PATH $INTEL_HOME/compiler/latest/linux/lib:$INTEL_HOME/mpi/latest/lib:$INTEL_HOME/mpi/latest/include:${LD_LIBRARY_PATH}

RUN apt-get update -y && \
apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 \
python3-dev \
python3-venv \
gcc \
g++

## INSTALL DEVITO

ADD ./requirements.txt /app/requirements.txt
ADD ./requirements-optional.txt /app/requirements-optional.txt
ADD ./requirements-mpi.txt /app/requirements-mpi.txt

RUN python3 -m venv /venv
RUN /venv/bin/pip install --no-cache-dir --upgrade pip
RUN /venv/bin/pip install --no-cache-dir jupyter
RUN /venv/bin/pip install --no-cache-dir wheel
RUN /venv/bin/pip install --no-cache-dir -r /app/requirements.txt
RUN /venv/bin/pip install --no-cache-dir -r /app/requirements-optional.txt
RUN . /opt/intel/oneapi/mpi/latest/env/vars.sh && /venv/bin/pip install --no-cache-dir -r /app/requirements-mpi.txt
RUN rm -rf ~/.cache/pip

ADD ./devito /app/devito
ADD ./tests /app/tests
ADD ./scripts /app/scripts
ADD ./examples /app/examples
ADD ./benchmarks /app/benchmarks
COPY setup.cfg /app/

ADD docker/run-jupyterlab.sh /jupyter
ADD docker/run-tests.sh /tests
ADD docker/run-print-defaults.sh /print-defaults
ADD docker/entrypoint.sh /docker-entrypoint.sh
ADD docker/nvdashboard.json /app/nvdashboard.json

RUN chmod +x /print-defaults /jupyter /tests /docker-entrypoint.sh && \
    /venv/bin/jupyter serverextension enable dask_labextension 

## Environment Variables for Intel Compilers use
# Set arch to Intel (icc)
ENV DEVITO_ARCH="intel" 
ENV DEVITO_LANGUAGE="openmp"

# Enable logging, Options: [unset, PERF, DEBUG]
ENV DEVITO_LOGGING=DEBUG 
 
## Create App user 
# Set the home directory to our app user's home.
ENV HOME=/app
ENV APP_HOME=/app

# Create the home directory for the new app user.
# Create an app user so our program doesn't run as root.
# Chown all the files to the app user.
RUN mkdir -p /app && \
    groupadd -r app && \
    useradd -r -g app -d /app -s /sbin/nologin -c "Docker image user" app && \
    chown -R app:app $APP_HOME && \
    chown app:app /docker-entrypoint.sh && \
    chown app:app /print-defaults && \
    chown app:app /tests && \
    chown app:app /jupyter

# Change to the app user.
USER app
WORKDIR /app

CMD ["/bin/bash"]

ARG ICC_HOME=/opt/intel/oneapi/compiler/latest/
ARG MPICC_HOME=/opt/intel/oneapi/mpi/latest/
ENV PATH $MPICC_HOME/bin:$MPICC_HOME/include:$ICC_HOME/linux/bin/intel64:$ICC_HOME/libfabric/bin:${PATH}
ENV LD_LIBRARY_PATH $ICC_HOME/linux/lib:$ICC_HOME/linux/compiler/lib/intel64_lin:$MPICC_HOME/lib:$MPICC_HOME/include:${LD_LIBRARY_PATH}

# ENTRYPOINT ["source /root/.oneapi_env_vars && \"$@\"", "/docker-entrypoint.sh"]
# ENTRYPOINT ["bash", "-c", ". /opt/intel/oneapi/mpi/latest/env/vars.sh  && \"$@\"", "../docker-entrypoint.sh"]
ENTRYPOINT ["/docker-entrypoint.sh"]
